package domein;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import persistentie.PersistentieController;

@Entity
public class Planning {
    
    @Id
    private int planningID;
    

    @OneToMany(fetch = FetchType.LAZY)
    private List<Campus> campussen;
    //private List<Lokaal> lokalen;
    @OneToMany(fetch = FetchType.LAZY)
    private List<Promotor> promotoren;
    //private List<Student> deStudenten;
    
   
    
    @OneToMany(fetch = FetchType.LAZY)
    private List<Presentatie> presentaties;
    
    private Boolean isZichtbaar;
    private Calendar zichtbaarTot;
    //private DomeinController dc;
    private PersistentieController pc;
    

    public Planning() {
        pc = PersistentieController.getInstance();
        presentaties = pc.geefPresentaties();
        promotoren = pc.geefPromotoren();
        campussen = pc.geefCampussen();
        //lokalen = pc.geefLokalen();
    }

    public void maakPlanningZichtbaar(Calendar eindDatum) {
        setIsZichtbaar(true);
        this.zichtbaarTot = eindDatum;
    }

    public void addPresentatie(Presentatie presentatie) {
        presentaties.add(presentatie);
    }

    public List<Beschikbaarheid> geefBeschikbaarheden(Promotor promotor) {
        /*for (Promotor p : dePromotoren) {
         if (p.getId() == promotorID) {
         return p.getBeschikbaarheden();
         }
         }*/
        return pc.findPromotorById(promotorID).getBeschikbaarheden();
    }

    public List<Presentatie> geefGeplandePresentaties() {
        List<Presentatie> geplandePresentaties = new ArrayList<>();
        for (Presentatie p : presentaties) {
            geplandePresentaties.add(p);
        }
        return geplandePresentaties;
    }

    public List<Presentatie> geefGeplandePresentaties(Campus campus, Lokaal lokaal) {
        List<Presentatie> geplandePresentaties = new ArrayList<>();
        for (Presentatie p : presentaties) {
            if (p.getCampus().equals(campus) && p.getLokaal().equals(lokaal)) {
                geplandePresentaties.add(p);
            }
        }
        return geplandePresentaties;
    }

    public List<Lokaal> geefLokalen(Campus campus) {
        return campus.getLokalen();
    }

    public Presentatie geefPresentatie(int dag, int tijdsvak, Campus campus, Lokaal lokaal) {
        Presentatie presentatie = null;

        for (Presentatie p : presentaties) {
            if (p.getDag() == dag && p.getTijdsvak() == tijdsvak && p.getCampus().equals(campus) && p.getLokaal().equals(lokaal)) {
                presentatie = p;
            }
        }
        return presentatie;
    }

    /**
     * @return the isZichtbaar
     */
    public Boolean getIsZichtbaar() {
        return isZichtbaar;
    }

    /**
     * @param isZichtbaar the isZichtbaar to set
     */
    public void setIsZichtbaar(Boolean isZichtbaar) {
        this.isZichtbaar = isZichtbaar;
    }

    /**
     * @param presentaties the presentaties to set
     */
    public void setPresentaties(List<Presentatie> presentaties) {
        this.presentaties = presentaties;
    }

    public List<Campus> geefCampussen() {
        return this.campussen;
    }

    public List<Lokaal> findLokalenByCampusId(int campusId) {
        return pc.findLokalenByCampusId(campusId);
    }

    public List<Campus> getCampussen() {
        return campussen;
    }

    public void setCampussen(List<Campus> campussen) {
        this.campussen = campussen;
    }

    public List<Promotor> getPromotoren() {
        return promotoren;
    }

    public void setPromotoren(List<Promotor> promotoren) {
        this.promotoren = promotoren;
    }

    public Calendar getZichtbaarTot() {
        return zichtbaarTot;
    }

    public void setZichtbaarTot(Calendar zichtbaarTot) {
        this.zichtbaarTot = zichtbaarTot;
    }

    public int getPlanningID() {
        return planningID;
    }

    public void setPlanningID(int planningID) {
        this.planningID = planningID;
    }

    
}
