package gui;

import domein.DomeinController;
import domein.Promotor;
import domein.Student;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import domein.observers.PromotorDialog;
import domein.observers.PromotorObserver;
import java.awt.HeadlessException;

/**
 * LIJN 220 aanpassen! code sandro
 * @author RootSoft
 */
public class PromotorToekennenPanel extends javax.swing.JPanel implements PromotorDialog {

    
    private final DomeinController dc;
    private final JList lijstStudenten, lijstPromotoren;
    private final DefaultListModel modelStudenten, modelPromotoren;
    private JLabel lblStudenten, lblPromotoren;
    private JButton btnSelecteerStudenten, btnSelecteerPromotoren, btnKoppelen;
    private JTextArea textAreaStudenten, textAreaPromotoren;
    private List<Student> geselecteerdeStudenten;
    private final Set<PromotorObserver> observers;

    public PromotorToekennenPanel(DomeinController dc) {
        super();
        this.dc = dc;
        this.modelStudenten = new DefaultListModel();
        this.lijstStudenten = new JList(modelStudenten);
        this.modelPromotoren = new DefaultListModel();
        this.lijstPromotoren = new JList(modelPromotoren);
        this.lijstPromotoren.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        observers = new HashSet<>();
        
        //initComponents(); Methode die niet manueel aangepast kan worden in de code, enkel drag and drop
        initGUI(); //Eigen geschreven methode om een JFrame aan te maken
    }

    private void initGUI() {
        try {
            setLayout(null);
            //setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            //setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            setVisible(true);
            

            {
                lblStudenten = new JLabel("Selecteer de studenten");
                add(lblStudenten);
                lblStudenten.setBounds(35, 25, 300, 25);
            }
            {
                JScrollPane pane = new JScrollPane(lijstStudenten);

                pane.setBounds(35, 50, 300, 155);
                add(pane);
            }
            {
                btnSelecteerStudenten = new JButton("Selecteer");
                btnSelecteerStudenten.setBounds(35, 225, 100, 25);
                add(btnSelecteerStudenten);
                btnSelecteerStudenten.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        geselecteerdeStudenten = lijstStudenten.getSelectedValuesList();
                        if (geselecteerdeStudenten.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "U selecteerde geen student(en)");
                        } else {
                            for (Student s : geselecteerdeStudenten) {
                                if (s.hasPromotor()) {
                                    Promotor promotorVanStudent = dc.findPromotorByEmail(s.getPromotor().getEmail());
                                    //dispose();
                                    new StudentenLoskoppelenVanPromotorJFrame(dc, s, promotorVanStudent);
                                }
                            }

                            toonLinkerDeel(e);
                        }
                    }
                });
            }
            {
                JSeparator x = new JSeparator(SwingConstants.VERTICAL);
                //x.setPreferredSize(new Dimension(3,3));
                 x.setBounds(360, 25, 5, 290);
                add(x);
            }
            for (Student s : dc.geefLijstStudenten()) {
                modelStudenten.addElement(s);
            }
            
            setSize(375, 250);

            // Get the size of the screen
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

            // Determine the new location of the window
            int w = getSize().width;
            int h = getSize().height;
            int x = (dim.width - w) / 2;
            int y = (dim.height - h) / 2;

            // Move the window
            setLocation(x, y);

        } catch (HeadlessException e) {
            
        }

    }

    private void toonLinkerDeel(ActionEvent e) {
        setSize(750, 365);
        lijstStudenten.setEnabled(false);
        btnSelecteerStudenten.setEnabled(false);
        {
            String begin = "U selecteerde volgende studenten:\n\n";
            textAreaStudenten = new JTextArea(begin);
            textAreaStudenten.setEditable(false);
            //textArea.setPreferredSize(new Dimension(25, 200));
            textAreaStudenten.setBounds(25, 200, 300, 100);

            for (Student s : geselecteerdeStudenten) {
                textAreaStudenten.append(s.getVoornaam() + " " + s.getFamilienaam() + "\n");
            }

            add(textAreaStudenten);
        }
        {
            JScrollPane scrollPane = new JScrollPane(textAreaStudenten, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
                    JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
           scrollPane.setBounds(35, 275, 300, 155);
            add(scrollPane);
        }

        /**
         * PROMOTOR GEDEELTE
         */
        {
            lblPromotoren = new JLabel("Selecteer de promotor");
            add(lblPromotoren);
            lblPromotoren.setBounds(400, 25, 300, 25);
        }
        {
            JScrollPane pane = new JScrollPane(lijstPromotoren);
            pane.setBounds(400,  50, 300, 155);
            add(pane);
        }
        {
            btnSelecteerPromotoren = new JButton("Selecteer");
            btnSelecteerPromotoren.setBounds(400, 225,  100, 25);
            add(btnSelecteerPromotoren);
            btnSelecteerPromotoren.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    Promotor geselecteerdePromotor = (Promotor) lijstPromotoren.getSelectedValue();

                    if (geselecteerdePromotor == null) {
                        JOptionPane.showMessageDialog(null, "U selecteerde geen promotor");
                    } else {
                        for (Student s : geselecteerdeStudenten) {
                            if (s.hasPromotor()) {
                                Promotor promotorVanStudent = dc.findPromotorByEmail(s.getPromotor().getEmail());
                                new StudentenLoskoppelenVanPromotorJFrame(dc, s, promotorVanStudent);
                            } else {
                                toonRechterdeel(e, geselecteerdePromotor);
                            }
                        }

                    }
                }
            });
        }
        for (Promotor p : dc.geefLijstPromotoren()) {
            modelPromotoren.addElement(p); //werkt omdat p = promotor object
            //modelPromotoren.addElement(p + " (" + p.getAantalKeerJury() + "/" + p.getMAXAANTALSTUDENTEN() + ")"); //werkt nie
        }
    }

    private void toonRechterdeel(ActionEvent e, final Promotor geselecteerdePromotor) {
        {
            String begin = "U selecteerde volgende promotor:\n\n";
            textAreaPromotoren = new JTextArea(begin);
            textAreaPromotoren.setEditable(false);
            //textAreaPromotoren.setPreferredSize(new Dimension(25, 200));
             textAreaPromotoren.setBounds(400, 200, 300, 65);
            textAreaPromotoren.append(geselecteerdePromotor.getVoornaam() + " " + geselecteerdePromotor.getFamilienaam());

            add(textAreaPromotoren);
        }
        {
            JScrollPane scrollPane2 = new JScrollPane(textAreaPromotoren);
            scrollPane2.setBounds(400, 275, 300, 65);
            add(scrollPane2);
        }
        {
            btnKoppelen = new JButton("Opslaan");
            btnKoppelen.setBounds(400, 375, 100, 25);
            add(btnKoppelen);
            btnKoppelen.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    int aantalKeerJury = geselecteerdePromotor.getAantalKeerJury();
                    for (Student s : geselecteerdeStudenten) {
                        //if (aantalKeerJury < geselecteerdePromotor.MAXAANTALSTUDENTEN) {
                        if (aantalKeerJury < 6) {
                            
                            System.out.println("Aantal keer jury: " + aantalKeerJury);
                            
                            geselecteerdePromotor.addStudent(s);
                            dc.kenPromotorToe(s.getEmail(), geselecteerdePromotor.getEmail());
                            aantalKeerJury++;
                            dc.verhoogAantalKeerJury(geselecteerdePromotor.getEmail(), aantalKeerJury);
                            JOptionPane.showMessageDialog(null, "Student " + s.getVoornaam() + " " + s.getFamilienaam() + " werd gekoppeld aan "
                                    + geselecteerdePromotor.getVoornaam() + " " + geselecteerdePromotor.getFamilienaam(), "Koppeling student en promotor geslaagd", JOptionPane.INFORMATION_MESSAGE);
                            
                        } else { //Promotor heeft het max aantal studenten bereikt
                            //dispose();
                            //new StudentenLoskoppelenJFrame(dc, geselecteerdePromotor);
                            new StudentenLoskoppelenJFrame(dc, geselecteerdePromotor);
                        }
                    }
                    //new StartJFrame(dc);
                    removeAll();
                    revalidate();
                    repaint();
                    initGUI();
                    //repaint();
                    //setVisible(true);
                    //revalidate();
                    
                    notifyObservers();
                    lijstStudenten.setEnabled(true);
                    btnSelecteerStudenten.setEnabled(true);
                    geselecteerdeStudenten.clear();
                }
            });
        }
        //pack();
        setSize(750, 365);
    }
    
    
    @Override
    public void addObserver(PromotorObserver observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(PromotorObserver observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (PromotorObserver observer : observers) {
            observer.updatePromotor();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 755, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
