package domein;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import persistentie.DAOFactory;
import domein.enums.DAO;
import persistentie.dao.InschrijvingDAO;
import persistentie.dao.LokaalDAO;
import persistentie.dao.PresentatieDAO;


public class DomeinController {

    //Attributen
    private final GebruikerRepository gebruikerRepository;
    private final BPCoordinator bpCoordinator;
    

    //Constructors
    
    /**
     * Constructor van de domeincontroller
     */
    public DomeinController() {
        DAOFactory.initFactory();
        gebruikerRepository = new GebruikerRepository();
        bpCoordinator = gebruikerRepository.getBpCoordinator();
    }

    /**
     * Constructor van de domeincontroller
     *
     * @param gebruikerRepository
     */
    public DomeinController(GebruikerRepository gebruikerRepository) {
        DAOFactory.initFactory();
        this.gebruikerRepository = gebruikerRepository;
        bpCoordinator = gebruikerRepository.getBpCoordinator();
    }

    //Methoden
    
    // ---------- GETTERS ---------- //
    
    public List<Student> geefLijstStudenten() {
        return gebruikerRepository.geefLijstStudenten();
    }
    
    public List<Promotor> geefLijstPromotoren() {
        return gebruikerRepository.geefLijstPromotoren();
    }
    
    public Map<String, String> geefPromotoren() {
        Map<String, String> promotoren = new HashMap<>();
        for (Promotor p : geefLijstPromotoren()) {
            promotoren.put(p.getEmail(), p.toString());
        }
        return promotoren;
    }
    
    public Map<String, String> geefStudenten() {
        Map<String, String> studenten = new HashMap<>();
        for (Student s : geefLijstStudenten()) {
            studenten.put(s.toString(), s.getEmail());
        }
        return studenten;
    }
    
    public List<Campus> geefLijstCampussen() {
        return DAOFactory.getDAO(DAO.CAMPUS).findAll();
    }
    
    public BPCoordinator geefBPCoordinator() {
        return gebruikerRepository.getBpCoordinator();
    }
    
    
    public Map<String, String> geefLijstOngeplandeStudentenVanPromotor(String pmail) {
        Map<String, String> studenten = new HashMap<>();
        for (Student s : geefLijstStudenten()) {
            if (s.getPromotor().getEmail().equals(pmail)) {
                studenten.put(s.toString(), s.getEmail());
            }
        }
        return studenten;
    }
    
    
    
    
    // ---------- FIND ---------- //
   
    public Student findStudentByEmail(String email) {
        return gebruikerRepository.findStudentByEmail(email);
    }
    
    public Promotor findPromotorByEmail(String email) {
        return gebruikerRepository.findPromotorByEmail(email);
    }
    
    public Campus findCampusByNaam(String cNaam) {
        return (Campus) DAOFactory.getDAO(DAO.CAMPUS).get(cNaam);
    }
    
    public Lokaal findLokaalByNaam(String lNaam) {
        return (Lokaal) DAOFactory.getDAO(DAO.LOKAAL).get(lNaam);
    }
    
    public Gast findGastByEmail(String email) {
        return (Gast) DAOFactory.getDAO(DAO.GAST).get(email);
    }
    
    public List<Lokaal> findLokalenByCampusId(String campusNaam) {
        LokaalDAO lDAO = (LokaalDAO) DAOFactory.getDAO(DAO.LOKAAL);
        return  lDAO.findLokalenByCampusId(campusNaam);
    }
    
    
    // --------- PROMOTOR TOEKENNEN ---------- //
    
    /**
     * Methode die een student koppelt met een promotor door middel van het
     * studentId.
     * Voegt daarna de student toe aan de lijst van studenten van de promotor.
     * Dit werd in commentaar gezet.
     *
     * @param sEmail
     * @param pEmail
     */
    public void kenPromotorToe(String sEmail, String pEmail) {
        gebruikerRepository.kenPromotorToe(sEmail, pEmail);
    }
    
    public void verhoogAantalKeerJury(String promotorEmail, int aantalKeerJury) {
        gebruikerRepository.verhoogAantalKeerJury(promotorEmail, aantalKeerJury);
        
    }
    
    
    
    // ---------- PRESENTATIE & PLANNING ---------- //
    
    public void startEditingPlanning() {
        bpCoordinator.startEditingPlanning();
    }
    
    public List<Integer> geefGeplandePresentaties() {
        List<Presentatie> presentaties = bpCoordinator.geefPlanning().geefGeplandePresentaties();
        List<Integer> geplandePresentaties = new ArrayList<>();
        for (Presentatie p : presentaties) {
            geplandePresentaties.add(p.getDag());
            geplandePresentaties.add(p.getTijdsvak());
        }
        return geplandePresentaties;
    }
    
    public Presentatie geefPresentatie(int dag, int tijdsvak) {
        PresentatieDAO pDAO = (PresentatieDAO) DAOFactory.getDAO(DAO.PRESENTATIE);
        return pDAO.findPresentatieByDagAndTijdsvak(dag, tijdsvak);
    }
    
    public void planPresentatie(int dag, int tijdsvak, String lokaalNaam, String campusNaam, String studentEmail) {
        PresentatieDAO pDAO = (PresentatieDAO) DAOFactory.getDAO(DAO.PRESENTATIE);
        pDAO.planPresentatie(dag, tijdsvak, lokaalNaam, campusNaam, studentEmail);
        //bpCoordinator.geefPlanning().addPresentatie(presentatie);
    }
    
    public void verwijderPresentatie(String studentEmail) {
        Presentatie p = (Presentatie) DAOFactory.getDAO(DAO.PRESENTATIE).get(studentEmail);
        DAOFactory.getDAO(DAO.PRESENTATIE).delete(p);
    }
    
    public List<Presentatie> findPresentatiesByLokaalId(String lokaalNaam) {
        PresentatieDAO pDAO = (PresentatieDAO) DAOFactory.getDAO(DAO.PRESENTATIE);
        return pDAO.findPresentatieByLokaalId(lokaalNaam);
    }
    
    public Presentatie findPresentatieByStudentEmail(String sEmail) {
        PresentatieDAO pDAO = (PresentatieDAO) DAOFactory.getDAO(DAO.PRESENTATIE);
        return pDAO.findPresentatieByStudentEmail(sEmail);
    }
    
    public void planningAanpassen(String studentEmail, int dag, int tijdslot, String campusNaam, String lokaalNaam) {
        PresentatieDAO pDAO = (PresentatieDAO) DAOFactory.getDAO(DAO.PRESENTATIE);
        pDAO.planningAanpassen(studentEmail, dag, tijdslot, campusNaam, lokaalNaam);
    }
    
    
    
    // ---------- JURYLEDEN ---------- //
    
    public void kenJuryLedenToe(String studentEmail, String juryLidEmail) {
        PresentatieDAO pDAO = (PresentatieDAO) DAOFactory.getDAO(DAO.PRESENTATIE);
        pDAO.kenJuryledenToe(studentEmail, juryLidEmail);
    }
    
    // ---------- INSCHRIJVINGEN ---------- //
    
    public void schrijfGastIn(String gastEmail, String studentEmail) {
        InschrijvingDAO iDAO = (InschrijvingDAO) DAOFactory.getDAO(DAO.INSCHRIJVING);
        iDAO.schrijfGastIn(gastEmail, studentEmail);
    }
    
    public List<Inschrijving> findInschrijvingenByPresentatieId(String studentEmail) {
        InschrijvingDAO iDAO = (InschrijvingDAO) DAOFactory.getDAO(DAO.INSCHRIJVING);
        return iDAO.findInschrijvingenByPresentatieId(studentEmail);
    }
    
    public List<Inschrijving> findInschrijvingenByGastEmail(String gastEmail) {
        InschrijvingDAO iDAO = (InschrijvingDAO) DAOFactory.getDAO(DAO.INSCHRIJVING);
        return iDAO.findInschrijvingenByGast(gastEmail);
    }
    
    public void inschrijvingGoedkeuren(String studentEmail, String gastEmail) {
        InschrijvingDAO iDAO = (InschrijvingDAO) DAOFactory.getDAO(DAO.INSCHRIJVING);
        iDAO.inschrijvingGoedkeuren(studentEmail, gastEmail);
    }

}
